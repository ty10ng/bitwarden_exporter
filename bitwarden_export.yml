---
- name: Bitwarden Export Data Playbook
  hosts: localhost
  gather_facts: no
  vars:
    root_backup_path: "/app/backups"
    task_failed: False
    gpg_encrypt: False
  tasks:
    - name: Prereq block
      block:
        - name: Load in vars.yml (required for secrets)
          include_vars: "{{ playbook_dir }}/vars.yml"
    - name: Main block
      block:
      # Generate a unique timestamp for the backup
      - name: Generate epoch timestamp
        set_fact:
          epoch_timestamp: "{{ lookup('pipe', 'date +%s') }}"
      # Create directories for backup and attachments
      - name: Create backup directories
        file:
          path: "{{ item }}"
          state: directory
        loop:
          - "{{ root_backup_path }}/{{ epoch_timestamp }}"
          - "{{ root_backup_path }}/{{ epoch_timestamp }}/attachments"
      # Set the Bitwarden server URL
      - name: Configure Bitwarden server URL
        command: bw config server "{{ bw_server_url }}"
      # Login to Bitwarden
      - name: Log in to Bitwarden
        command: bw login "{{ bw_email }}" "{{ bw_password }}"
        no_log: True
      # Unlock Bitwarden vault
      - name: Unlock Bitwarden vault
        command: bw unlock "{{ bw_password }}" --raw
        register: bw_unlock
        no_log: True
      # Set Bitwarden session environment variable
      - name: Set Bitwarden session environment variable
        set_fact:
          bw_session: "{{ bw_unlock.stdout }}"
      # Export Bitwarden data to JSON format
      - name: Export Bitwarden data to JSON
        command: bw export --session "{{ bw_session }}" --format json --output {{ root_backup_path }}/{{ epoch_timestamp }}/bitwarden_export.json
        args:
          chdir: "{{ root_backup_path }}/{{ epoch_timestamp }}"
        no_log: True
      - name: Generate SHA-256 hash of the JSON file
        ansible.builtin.shell:
          cmd: sha256sum "{{ root_backup_path }}/{{ epoch_timestamp }}/bitwarden_export.json"
        register: json_sha256_validation
        changed_when: False
      - name: Write SHA-256 hash to validation file
        ansible.builtin.copy:
          content: "{{ json_sha256_validation.stdout.split(' ')[0] }}"
          dest: "{{ root_backup_path }}/{{ epoch_timestamp }}/validation_sha256.txt"
      # Check and list items with attachments
      - name: Check for items with attachments
        shell: bw list items --session "{{ bw_session }}" | jq -r '[.[] | select(.attachments != null)]'
        register: items_with_attachments
        ignore_errors: yes
      # Download attachments if any exist
      - name: Download attachments
        shell: bw get attachment "{{ item.attachments[0].fileName }}" --itemid "{{ item.id }}" --session "{{ bw_session }}" --output "{{ root_backup_path }}/{{ epoch_timestamp }}/attachments/{{ item.name }}/"
        loop: "{{ (items_with_attachments.stdout | from_json) }}"
        when: items_with_attachments.stdout != "" and items_with_attachments.rc == 0
        no_log: True
      # Display message if no attachments exist
      - name: Report no attachments
        debug:
          msg: "No attachments exist, so nothing to export."
        when: items_with_attachments.stdout == "" or items_with_attachments.rc != 0
      # Create a tar.gz archive of the exported data
      - name: Create tar.gz archive of the export
        ansible.builtin.archive:
          path: "{{ root_backup_path }}/{{ epoch_timestamp }}"
          dest: "{{ root_backup_path }}/{{ epoch_timestamp }}.tar.gz"
          format: gz
      - name: Encrypt backup archive with GPG (optional)
        ansible.builtin.shell:
          cmd: "gpg --armor --recipient {{ gpg_backup_recipient }} --batch --passphrase '{{ gpg_backup_passphrase }}' --cipher-algo AES256 --output {{ root_backup_path }}/{{ epoch_timestamp }}.tar.gz.asc --encrypt {{ root_backup_path }}/{{ epoch_timestamp }}.tar.gz"
        no_log: True
        when: gpg_encrypt
      # Cleanup - Remove the uncompressed/unencrypted backup files
      - name: Cleanup - Remove the uncompressed backup files
        file:
          path: "{{ item }}"
          state: absent
        loop:
          - "{{ root_backup_path }}/{{ epoch_timestamp }}"
      - name: Cleanup - Remove the unencrypted backup files (optional)
        file:
          path: "{{ item }}"
          state: absent
        loop:
          - "{{ root_backup_path }}/{{ epoch_timestamp }}.tar.gz"
        when: gpg_encrypt
      rescue:
        - name: Flip our failure flag
          set_fact:
            task_failed: true
        - name: Fail the playbook
          fail:
      always:
        - name: Send success notification to Slack
          community.general.slack:
            token: "{{ slack_token }}"
            channel: "{{ slack_channel }}"
            msg: "Bitwarden Export Process Completed Successfully - Host: {{ lookup('pipe', 'hostname') }}, Time: {{ lookup('pipe', 'date') }}"
          when: (not task_failed | default(false)) and (slack_token != '')
          ignore_errors: True
        - name: Send failure notification to Slack
          community.general.slack:
            token: "{{ slack_token }}"
            channel: "{{ slack_channel }}"
            msg: "Bitwarden Export Process Failed on Host: {{ lookup('pipe', 'hostname') }} at {{ lookup('pipe', 'date') }}. Manual action will be required to investigate the cause of the failure."
          when: (task_failed | default(false)) and (slack_token != '')
          ignore_errors: True
        - name: Cleanup - Remove the uncompressed backup files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ root_backup_path }}/{{ epoch_timestamp }}"
        - name: Cleanup - Remove the unencrypted backup files (optional)
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ root_backup_path }}/{{ epoch_timestamp }}.tar.gz"
          when: gpg_encrypt
        - name: Logout and lock the vault
          command: bw logout
          ignore_errors: True
